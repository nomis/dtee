/*
Copyright 2021-2024  Simon Arlott

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

@Library("uuid")
import uk.uuid.jenkins.pipeline.Cron
import uk.uuid.jenkins.pipeline.Email

def application_matrix_main() {
	/* See also: excludes */
	return COMPILER == "GCC-12"
}

def docs_matrix_main() {
	return SPHINX == "7"
}

def application_with_coverage() {
	return application_matrix_main() && BUILD_TYPE == "debug"
}

def application_use_test_results() {
	return application_matrix_main() && BUILD_TYPE == "release"
}

def c_compiler() {
	return COMPILER.toLowerCase()
}

def cxx_compiler() {
	if (COMPILER.startsWith("GCC")) {
		return "g++" + COMPILER.substring(3).toLowerCase()
	} else if (COMPILER.startsWith("Clang")) {
		return "clang++" + COMPILER.substring(5).toLowerCase()
	} else {
		return COMPILER.toLowerCase()
	}
}

def gcov_compiler() {
	if (COMPILER.startsWith("GCC")) {
		return "gcov" + COMPILER.substring(3).toLowerCase()
	} else {
		return "gcov"
	}
}

pipeline {
	agent none
	triggers {
		cron("${Cron.schedule(this)}")
	}
	options {
		disableConcurrentBuilds()
	}
	environment {
		PIPENV_VENV_IN_PROJECT = "1"
		PIPENV_SKIP_LOCK = "1"
	}
	stages {
		stage("Application") {
			matrix {
				axes {
					axis {
						name "PLATFORM"
						values "Linux"
					}
					axis {
						name "COMPILER"
						values "GCC-5", "GCC-6", "GCC-7", "GCC-8", "GCC-9", "GCC-10", "GCC-11", "GCC-12", "GCC-13", "GCC-14", "Clang-3.9", "Clang-4.0", "Clang-5.0", "Clang-6.0", "Clang-7", "Clang-8", "Clang-9", "Clang-10", "Clang-11", "Clang-12", "Clang-13", "Clang-14", "Clang-15", "Clang-16", "Clang-17"
					}
					axis {
						name "BUILD_TYPE"
						values "release", "debug"
					}
				}
				excludes {
					exclude {
						axis {
							name "BUILD_TYPE"
							values "debug"
						}
						axis {
							/* See also: application_matrix_main() */
							name "COMPILER"
							notValues "GCC-12", "Clang-17"
						}
					}
				}
				agent {
					dockerfile {
						label "${PLATFORM} && Docker"
						dir ".uuid-uk"
						filename "application-PLATFORM_${PLATFORM},COMPILER_${COMPILER}.Dockerfile"
						args "--cap-drop=ALL --security-opt=no-new-privileges=true"
					}
				}
				environment {
					TMPDIR = "${WORKSPACE_TMP}"
					CC = "${c_compiler()}"
					CXX = "${cxx_compiler()}"
					GCOV = "${gcov_compiler()}"
					DESTDIR = "${WORKSPACE_TMP}/DESTDIR"
				}
				stages {
					stage("Checkout") {
						steps {
							sh "git clean -fdx"
							sh "git fetch --tags"
						}
					}
					stage("Prepare") {
						steps {
							sh "python3 --version"
							sh "pip3 freeze"
							sh '[ -z "${PYTHON}" ] || ${PYTHON} --version'
							sh '[ -z "${PIP}" ] || ${PIP} freeze'

							sh "echo \"geninfo_gcov_tool = ${GCOV}\" >>.lcovrc"

							dir(DESTDIR) {
								deleteDir()
							}
						}
					}
					stage("Build") {
						steps {
							sh "meson setup --buildtype=${BUILD_TYPE} build/ -Db_lto=${BUILD_TYPE == 'release'} -Db_coverage=${application_with_coverage()} -Dtest_expect_fail=true --unity on --unity-size 10000"
							sh "ninja -C build/ -j 1"
						}
						post {
							failure {
								sh "cat build/meson-logs/meson-log.txt"
							}
						}
					}
					stage("Test") {
						steps {
							dir("build") {
								sh "meson test --no-rebuild --print-errorlogs --num-processes 1"
							}
						}
						post {
							always {
								script {
									if (application_use_test_results()) {
										junit "build/meson-logs/testlog.junit.xml"
									}
								}
							}
						}
					}
					stage("Coverage") {
						when {
							expression { application_with_coverage() }
						}
						steps {
							sh "ninja -C build/ -j 1 coverage-html"
							sh "ninja -C build/ -j 1 coverage-xml"
						}
						post {
							success {
								discoverGitReferenceBuild()
								recordCoverage(
									/* Meson uses gcovr to convert lcov output to cobertura format */
									tools: [[parser: "COBERTURA", pattern: "build/meson-logs/coverage.xml"]],
									sourceCodeRetention: "NEVER",
								)
								publishHTML([
									allowMissing: false,
									alwaysLinkToLastBuild: false,
									keepAll: false,
									reportName: "Coverage",
									reportDir: "build/meson-logs/coveragereport",
									reportTitles: "dtee",
									reportFiles: "index.html",
								])
							}
						}
					}
					stage("Install") {
						steps {
							sh "ninja -C build/ -j 1 install"
						}
					}
				}
				post {
					cleanup {
						cleanWs()
					}
				}
			}
		}
		stage("Docs") {
			matrix {
				axes {
					axis {
						name "PLATFORM"
						values "Linux"
					}
					axis {
						/* 4.x, 5.x require Python [3.6, 3.10) */
						name "SPHINX"
						values "4", "5", "6", "7"
					}
				}
				agent {
					dockerfile {
						label "${PLATFORM} && Docker"
						dir ".uuid-uk"
						filename "docs-PLATFORM_${PLATFORM},SPHINX_${SPHINX}.Dockerfile"
						additionalBuildArgs "--build-arg SPHINX=${SPHINX}"
						args "--cap-drop=ALL --security-opt=no-new-privileges=true"
					}
				}
				stages {
					stage("Checkout") {
						steps {
							sh "git clean -fdx"
						}
					}
					stage("Prepare") {
						steps {
							script {
								sh "python3 --version"
								sh "pip3 freeze"
								sh '[ -z "${PYTHON}" ] || ${PYTHON} --version'
								sh '[ -z "${PIP}" ] || ${PIP} freeze'
							}
						}
					}
					stage("Build Manual") {
						steps {
							sh "make -C docs man"
						}
					}
					stage("Build Website") {
						steps {
							sh "make -C docs html"
						}
						post {
							success {
								script {
									if (docs_matrix_main()) {
										publishHTML([
											allowMissing: false,
											alwaysLinkToLastBuild: false,
											keepAll: false,
											reportName: "Documentation",
											reportDir: "docs/build/html/",
											reportTitles: "dtee",
											reportFiles: "index.html",
										])
									}
								}
							}
						}
					}
					stage("Check Links") {
						when {
							expression { docs_matrix_main() }
						}
						steps {
							sh "make -C docs linkcheck"
						}
					}
				}
				post {
					cleanup {
						cleanWs()
					}
				}
			}
		}
	}
	post {
		always {
			script {
				Email.send(this)
			}
		}
	}
}

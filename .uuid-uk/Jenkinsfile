/*
Copyright 2021-2022  Simon Arlott

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

@Library("uuid")
import uk.uuid.jenkins.pipeline.Cron
import uk.uuid.jenkins.pipeline.Email

def application_matrix_main() {
	return COMPILER == "GCC-12"
}

def application_with_docs() {
	return application_matrix_main() && BUILD_TYPE == "release"
}

def application_with_coverage() {
	return application_matrix_main() && BUILD_TYPE == "debug"
}

def application_use_test_results() {
	return application_matrix_main() && BUILD_TYPE == "release"
}

def application_agent_labels() {
	def labels = [PLATFORM, COMPILER, "Python", "Boost", "gettext"]

	if (application_with_coverage()) {
		labels.addAll(["lcov", "gcovr"])
	}

	return labels.join(" && ")
}

def c_compiler() {
	return COMPILER.toLowerCase()
}

def cxx_compiler() {
	if (COMPILER.startsWith("GCC")) {
		return "g++" + COMPILER.substring(3).toLowerCase()
	} else if (COMPILER.startsWith("Clang")) {
		return "clang++" + COMPILER.substring(5).toLowerCase()
	} else {
		return COMPILER.toLowerCase()
	}
}

def gcov_compiler() {
	if (COMPILER.startsWith("GCC")) {
		return "gcov" + COMPILER.substring(3).toLowerCase()
	} else {
		return "gcov"
	}
}

def application_packages() {
	def packages = []

	if (COMPILER == "Clang-3.9") {
		// https://github.com/mesonbuild/meson/issues/9569
		packages.add('"meson!=0.57.*,!=0.58.*,!=0.59.*,!=0.60,!=0.60.1"')
	} else {
		packages.add('meson')
	}

	packages.add('ninja')

	if (application_with_docs()) {
		packages.add('Sphinx')
	}

	if (application_with_coverage()) {
		packages.add('gcovr')
	}

	return packages.join(" ")
}

def docs_matrix_main() {
	return SPHINX == ">=5"
}

def docs_agent_labels() {
	def labels = [PLATFORM]

	if (SPHINX == "==1.3") {
		labels.add("Python-2")
	} else if (SPHINX == "~=3.0") {
		labels.add("(Python-3.6 || Python-3.7 || Python-3.8 || Python-3.9)")
	} else {
		labels.add("Python")
	}

	return labels.join(" && ")
}

def docs_pipenv_python() {
	if (SPHINX == "==1.3") {
		return "--python 2"
	} else {
		return ""
	}
}

def docs_packages() {
	if (SPHINX == "==1.3") {
		return '"docutils<0.13" "Jinja2<3" "Pygments<2.6" "MarkupSafe<2"'
	} else if (SPHINX == "~=1.0" || SPHINX == "~=2.0") {
		return '"docutils<0.18" "Jinja2<3.1"'
	} else if (SPHINX == "~=3.0") {
		return '"Jinja2<3.1"'
	} else {
		return ""
	}
}

pipeline {
	agent none
	triggers {
		cron("${Cron.schedule(this)}")
	}
	options {
		disableConcurrentBuilds()
	}
	environment {
		PIPENV_VENV_IN_PROJECT = "1"
		PIPENV_SKIP_LOCK = "1"
	}
	stages {
		stage("Application") {
			matrix {
				axes {
					axis {
						name "PLATFORM"
						values "Linux"
					}
					axis {
						name "COMPILER"
						values "GCC-5", "GCC-6", "GCC-7", "GCC-8", "GCC-9", "GCC-10", "GCC-11", "GCC-12", "Clang-3.9", "Clang-4.0", "Clang-5.0", "Clang-6.0", "Clang-7", "Clang-8", "Clang-9", "Clang-10", "Clang-11", "Clang-12", "Clang-13", "Clang-14"
					}
					axis {
						name "BUILD_TYPE"
						values "release", "debug"
					}
				}
				excludes {
					exclude {
						axis {
							name "BUILD_TYPE"
							values "debug"
						}
						axis {
							name "COMPILER"
							notValues "GCC-12", "Clang-14"
						}
					}
				}
				agent {
					label application_agent_labels()
				}
				environment {
					PATH = "${WORKSPACE_TMP}/PATH:${env.PATH}"
					TMPDIR = "${WORKSPACE_TMP}"
					CC = "${c_compiler()}"
					CXX = "${cxx_compiler()}"
					GCOV = "${gcov_compiler()}"
					DESTDIR = "${WORKSPACE_TMP}/DESTDIR"
				}
				stages {
					stage("Checkout") {
						steps {
							sh "git clean -fdx"
						}
					}
					stage("Prepare") {
						steps {
							sh "pipenv install ${application_packages()}"
							sh "pipenv graph"

							script {
								if (application_with_coverage() && GCOV != "gcov") {
									writeFile(
										file: "${WORKSPACE_TMP}/PATH/gcov",
										text: '#!/bin/sh\nexec "$GCOV" "$@"\n',
									)
									sh "chmod a+x \"${WORKSPACE_TMP}/PATH/gcov\""
								}
							}

							dir(DESTDIR) {
								deleteDir()
							}
						}
					}
					stage("Build") {
						steps {
							sh "pipenv run meson --buildtype=${BUILD_TYPE} build/ -Db_lto=${BUILD_TYPE == 'release'} -Db_coverage=${application_with_coverage()} -Dtest_expect_fail=true --unity on --unity-size 10000"
							sh "pipenv run ninja -C build/ -j 1"
						}
						post {
							failure {
								sh "cat build/meson-logs/meson-log.txt"
							}
						}
					}
					stage("Test") {
						steps {
							dir("build") {
								sh "pipenv run meson test --no-rebuild --print-errorlogs --num-processes 1"
							}
						}
						post {
							always {
								script {
									if (application_use_test_results()) {
										junit "build/meson-logs/testlog.junit.xml"
									}
								}
							}
						}
					}
					stage("Coverage") {
						when {
							expression { application_with_coverage() }
						}
						steps {
							sh "pipenv run ninja -C build/ -j 1 coverage-html"
							sh "pipenv run ninja -C build/ -j 1 coverage-xml"
						}
						post {
							success {
								publishCoverage(
									adapters: [cobertura("build/meson-logs/coverage.xml")],
									sourceFileResolver: sourceFiles("NEVER_STORE"),
								)
								publishHTML([
									allowMissing: false,
									alwaysLinkToLastBuild: false,
									keepAll: false,
									reportName: "Coverage",
									reportDir: "build/meson-logs/coveragereport",
									reportTitles: "dtee",
									reportFiles: "index.html",
								])
							}
						}
					}
					stage("Install") {
						steps {
							sh "pipenv run ninja -C build/ -j 1 install"
						}
					}
				}
				post {
					cleanup {
						cleanWs()
					}
				}
			}
		}
		stage("Docs") {
			matrix {
				axes {
					axis {
						name "PLATFORM"
						values "Linux"
					}
					axis {
						name "SPHINX"
						values "==1.3", "~=1.0", "~=2.0", "~=3.0", "~=4.0", ">=5"
					}
				}
				agent {
					label docs_agent_labels()
				}
				stages {
					stage("Checkout") {
						steps {
							cleanWs()
							checkout scm
						}
					}
					stage("Prepare") {
						steps {
							sh "pipenv ${docs_pipenv_python()} install ${docs_packages()} \"Sphinx${SPHINX}\""
							script {
								if (docs_pipenv_python() != "--python 2") {
									sh "pipenv graph"
								}
							}
						}
					}
					stage("Build Manual") {
						steps {
							sh "pipenv run make -C docs man"
						}
					}
					stage("Build Website") {
						steps {
							sh "pipenv run make -C docs html"
						}
						post {
							success {
								script {
									if (docs_matrix_main()) {
										publishHTML([
											allowMissing: false,
											alwaysLinkToLastBuild: false,
											keepAll: false,
											reportName: "Documentation",
											reportDir: "docs/build/html/",
											reportTitles: "dtee",
											reportFiles: "index.html",
										])
									}
								}
							}
						}
					}
					stage("Check Links") {
						when {
							expression { docs_matrix_main() }
						}
						steps {
							sh "pipenv run make -C docs linkcheck"
						}
					}
				}
				post {
					cleanup {
						cleanWs()
					}
				}
			}
		}
	}
	post {
		always {
			script {
				Email.send(this)
			}
		}
	}
}
